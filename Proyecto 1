import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split

# Cargar los datos desde un archivo
datos = np.load("proyecto_training_data.npy")

# Dividir los datos en conjuntos de entrenamiento y pruebas
np.random.shuffle(datos)
train_size = int(0.8 * len(datos))
train_set = datos[:train_size]
test_set = datos[train_size:]
# Cargar los datos desde un archivo
datos = np.load("proyecto_training_data.npy")
# Crear un DataFrame con los datos
df = pd.DataFrame(datos, columns=['Y', 'X2', 'X3', 'X4', 'X5', 'X6'])

# Calcular la media para cada variable
media = df.mean()

# Calcular el valor máximo para cada variable
maximo = df.max()

# Calcular el valor mínimo para cada variable
minimo = df.min()

# Calcular el rango para cada variable
rango = maximo - minimo

# Calcular la desviación estándar para cada variable
std = df.std()

# Imprimir los resultados
print("Media:")
print(media)
print("\nValor máximo:")
print(maximo)
print("\nValor mínimo:")
print(minimo)
print("\nRango:")
print(rango)
print("\nDesviación estándar:")
print(std)
# Graficar un histograma de cada variable
for col in df.columns:
    sns.distplot(df[col], kde=False)
    plt.title(f"Histograma de {col}")
    plt.xlabel(col)
    plt.ylabel("Frecuencia")
    plt.show()
# Calcular la matriz de correlación entre todas las variables
corr_matrix = df.corr()

# Imprimir la matriz de correlación
print("Matriz de correlación:")
print(corr_matrix)

# Graficar x vs y (scatterplot) y colocar el coeficiente de correlación en el título
for col in df.columns[:-1]:
    plt.scatter(df[col], df['Y'])
    plt.title(f"{col} vs Y (coef. de corr. = {corr_matrix.loc[col, 'Y']:.2f})")
    plt.xlabel(col)
    plt.ylabel("Y")
    plt.show()

# Seleccionar las 2 variables con mayor correlación con Y
max_corr = corr_matrix.iloc[:-1, -1].abs().nlargest(2)
print(f"\nLas 2 variables con mayor correlación con Y son:\n{max_corr}")
epochs= 3000
learning_rate= 0.0000000001
x3 = df['X3'].values.reshape(-1, 1)
unos_1 = np.ones_like(x3)
vector_1 = np.hstack((x3, unos_1))
y = df['Y'].values.reshape(-1, 1)
b1 = 0.2
b0 = 0.5
betas= np.array([b1,b0]).reshape(-1,1)

for iter in range(epochs):
    y_pred = np.dot(vector_1,betas)
    error = np.mean(np.power(y-y_pred,1/2))    
    delta_b0 = np.mean(y_pred-y)
    delta_b1 = np.mean((y_pred-y)*x3)
    b1= betas[1] - learning_rate * delta_b1
    b0= betas[0] - learning_rate * delta_b0
    betas= np.array([b1,b0]).reshape(-1,1)
